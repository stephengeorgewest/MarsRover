package rover;

import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.util.LinkedList;

public class MulticastQueue extends Thread{

	MulticastSocket s;
	private InetAddress mc_address;
	private int mc_port;

	private LinkedList<Packet> = null;
	private Object queue_lock;
	
	public MulticastQueue(InetAddress address, int port){
		this.mc_address = address;
		this.mc_port = port;
		this.setDaemon(true);
		queue_lock = new Object();
	}
	
	public void Enqueue(Packet p){
		
		
	}
	
	public void run(){
		
		while(true){
			try{
				if(s == null){
					s = new MulticastSocket(mc_port);
					s.joinGroup(mc_address);
					
				}else{
					byte[] buf = new byte[65000];
					DatagramPacket recv = new DatagramPacket(buf, buf.length);
//					System.out.println("Listening for packets");
					s.receive(recv);
//					System.out.println("Packet Received");
					Packet p = new Packet(recv.getData(), recv.getLength());
					packetReceived(p);
					
				}
			}catch (Exception e){
				e.printStackTrace();
			}
			
			
		}
	}
	
	
	 public DataServer(IPAddress intefaceIP, IPAddress multiCastGroup, int mcport)
     {
         this.multiCastGroup = multiCastGroup;
         this.mcport = mcport;
         this.local = intefaceIP;
         encoding = new System.Text.ASCIIEncoding();
         queue_lock = new object();
         PQueue = new Queue<Packet>();


         socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
         rep = new IPEndPoint(multiCastGroup, mcport);

         thread = new Thread(ThreadStart);
         thread.IsBackground = true;
         thread.Start();
     }

     public void AddToQueue(Packet p)
     {
         lock (queue_lock)
         {
             PQueue.Enqueue(p);
         }
     }

     private void ThreadStart()
     {
         while (true)
         {
             int count = 0;
             lock (queue_lock)
             {
                 count = PQueue.Count;
             }

             if (count > 0)
             {
                 //Console.WriteLine("Sending " + count + " packets");
                 lock( queue_lock){
                 while (PQueue.Count > 0)
                 {
                     //send the packet
                     Packet p = PQueue.Dequeue();
                     Console.WriteLine("Sending packet " + p.packet[0] + " " + rep.Address + ":" + rep.Port);
                     socket.SendTo(p.packet, p.bytes, SocketFlags.None , rep);
                 }}
             }
             else
             {
                 Thread.Sleep(5);
             }
         }
     }

}
